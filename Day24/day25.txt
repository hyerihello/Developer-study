1. 분석함수 종류를 살펴보고 활용하자.
2. join 또는 subquery를 살펴보고 구현해보자.
=====================================
분석함수를 사용하는 이유
- RDB상에서 컬럼과 컬럼연산, 비교, 연결은 쉬운반면,
  행과 행간의 관계를 정의하거나, 비교, 연산하는 것을 하나의 SQL로 처리하기 힘든점

- 프로그램 작성, 인라인 뷰를 이용해서 복잡한 SQL문 작성
- 분석함수를 도입해서 행간의 연산을 원활하게 연동한다. 단 중첩해서 사용하지 못하지만
서브 쿼리에서 사용할 수 있다.

[형식]

    SELECT Analytic_Function(arguments) OVER
                            ([PARTITION BY 절] [Order BY 절] [Windowing 절] 중 택1)
    FROM 테이블명;

 - Analytic_Fungtion : avg, count, lag, lead, max, min, rank, ratio_to_report,
                        row_number, sum 등
                        arguments 0~3 개 까지만 올 수 있다.
                        count(*)만 허용 *, DISTINCT 는 해당 집계 함수가 허용할 때만 지원해준다.
 - PARTITION BY : 쿼리 결과를 <expr_list> 별로 그룹핑한다. 생략시에는 하나의 그룹으로 리턴.
 - Order by : Order by <expr_list> [ASC|DESC | NULLS FIRST| NULLS LAST]
              표현식에서는 별칭이나 숫자를 사용할 수 없다.

 - Windowing : ROWS는 물리적인 단위 (ROW위치) 고, RANGE 는 논리적인단위 (ROW의 값) 이다.
               ROWS[RANGE] BETWEEN start_point AND end_point
   -> start_point : 그룹별 시작점을 의미
                    UNBOUNDED PRECEDING, CURRENT ROW
                    value_expr PRECEDING or value_expr FOLLOWING 이 올 수 있다.
   -> end_point : 그룹별 시작점을 의미
                    UNBOUNDED FOLLOWING, CURRENT ROW
                    value_expr PRECEDING or value_expr FOLLOWING 이 올 수 있다.
 - OVER : 해당 함수가 쿼리 결과 집합에 따라서 적용되는 지시어 이다.
          FROM, WHERE, GROUP BY, HAVING 이후에 계산된다.
          SELECT, ORDER BY 구문 뒤에 사용할 수 있다.
=====================================================
 분석 함수 장점
  1. JOIN 이나 프로그램의 OVER HEAD를 줄임
     (QUERY SPEED의 향상된 SELF-JOIN, 절차적 로직으로 표현하는 것을
     NATIVE SQL 에서 바로 적용하라 수 있도록 JOIN 이나 프로그램의 OVER HEAD를 줄임)

  2. 간결한 SQL로 복잡한 분석 작업을 수행이 가능 (유지보수가 간편하고 생산성 향상)
  3. 이해 및 활용이 용이 (기존 SQL - syntax를 그래도 쓰기 때문에 ANSI SQL로 채택된다.)
=========================================================
     SELECT Analytic_Function(arguments) OVER
                            ([PARTITION BY 절] [Order BY 절] [Windowing 절] 중 택1)
    FROM 테이블명;

Ranking Family 특징
 - 대상 집합에 대해서 특정 칼럼들을 기준으로 순위나 등급을 부여한다.
 - 오름차순,  내림차순 가능
 - NULL은 순위의 가장 처음 또는 마지막으로 강제 처리된다.
 - RANK function 은 각 PARTITION 마다 초기화가 된다.
 - 순위 또는 등급은 group by cube, rollup 절 마다 초기화가 된다.

 Q1) 사원테이블에서 사원의 이름, 부서번호, 급여, 급여가 많은 사원으로 부터 순위를 조회하자.
     RANK () : 각 로우마다 순위를 매긴다.
               P -> O -> 1부터 시작하여 동일한 값은 동일한 순위를 가지고,
               동일한 순위의 수만큼 다음 순위는 건너 뛴다.

SELECT ENAME, DEPTNO, SAL, RANK() OVER (ORDER BY SAL DESC) "RANK"
FROM EMP;

SELECT ENAME, DEPTNO, SAL,
    RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) "RANK"
FROM EMP;

Q2) 샘플 테이블 생성
칼럼명을 명시하면 1:1 로 줘야한다.

 CREATE TABLE TEST_EMP
 AS
 SELECT * FROM EMP;

INSERT INTO TEST_EMP (EMPNO, ENAME, SAL, DEPTNO) VALUES(111, 111, 3000, 30);
INSERT INTO TEST_EMP (EMPNO, ENAME, SAL, DEPTNO) VALUES(222, 222, 3000, 30);
INSERT INTO TEST_EMP (EMPNO, ENAME, SAL, DEPTNO) VALUES(333, 333, 3000, 20);
INSERT INTO TEST_EMP (EMPNO, ENAME, SAL, DEPTNO) VALUES(444, 444, 3000, 20);

 CREATE TABLE TEST02
 AS
 SELECT ENAME, EMPNO FROM EMP;

 CREATE TABLE TEST03 (MYNAME, MYNO)
 AS
 SELECT ENAME, EMPNO, JOB
 FROM EMP
 WHERE ENAME = KING;

 Q3)
SELECT ENAME, DEPTNO, SAL,
RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) "RANK"
FROM TEST_EMP;

** COMMIT; -> INSERT, DELETE, UPDATE 명령을 수행후 저장

Q4)
DENSE_RANK() 동률순위

SELECT ENAME, DEPTNO, SAL,
DENSE_RANK() OVER (PARTITION BY DEPTNO ORDER BY SAL DESC) "RANK"
FROM TEST_EMP;

Q5) 20번 사원의 이름, 봉급, 누적분산 정보를 조회하자.
CUME_DIST() : Cumulative Distribution Funtion / 주어진 그룹에 대한 상대적인 누적분포도 값을 반환
- PARTITION 나누어진 블럭별로 각 row를 ORDER BY 절에 명시된 순서대로 정렬한 후
  그룹별 상대적인 위치(누적된 분산정보)를 구한다.
- 상대적인 위치는 구하고자 하는 값보다 작거나 같은 값을 가진 ROW수를 그룹내
  전체 ROW수로 나눈것을 의미한다. 결과값의 범위는 0보다 크고 1보다 작거나 같다.

SELECT ENAME, SAL, CUME_DIST() OVER (ORDER BY SAL)
FROM TEST_EMP
WHERE DEPTNO = 20;

Q6) NTILE()
 ex1)- PARTITION 내에 100개의 ROW - 4개의 BUCKET 값을 나누고 싶다. NTILE(4)
   1개의 BUCKET 당 25개씩 ROW가 배정된다.
 ex2)- 103개의 ROW에 대해서 NTILE (5)를 적용하면
    정확하게 떨어지지 않을경우 근사치로 배분한후 남는 값에 대해서
    최초 PARTITION 부터 한개씩 배분한다.
    1 (21), 2(21), 3(21), 4(20), 5(2)
 ex3) 사원의 봉급을 기준으로 4등급으로 분류하자.
 SELECT ENAME, SAL, NTILE(4) OVER(ORDER BY SAL)
 FROM EMP;

7) ROW_NUMBER()
 PARTITION 내에  ORDER BY 절에 의해 정렬된 순서로 유일한 값을 리턴한다.
 ROWNUM과는 전혀 상관없다.

 사원번호, 이름, 봉급, 입사일을 조회하는데 순번을 매기자(ROW_NUMBER())
 급여가 많은순으로 같은 급여를 받는경우 입사일이 빠른사람부터 순번을 부여하자.

 SELECT EMPNO, ENAME, SAL, HIREDATE,
 ROW_NUMBER() OVER (ORDER BY SAL DESC, HIREDATE ASC) AS 순번
 FROM TEST_EMP;

=======================================
Windowing : 윈도우 집계함수 (sum, min, max, min) 는 ROW에 대한 집계함수
REPORTING : 한 집합 레벨에 대한 집계 값과 다른 집합 레벨에 대한 집계값의 비교를
통해 분석하고자 하는 경우
 EX) 사원의 급여와 해당 부서의 평균 급여를 비교할때,
    사원의 급여를 제외한 부서의 평균 급여를 알고 싶다.

 Q8) 사원의 이름, 부서번호, 급여, 전체급여 합계, 부서별 합계를 리턴하자.
  SELECT ENAME, DEPTNO, SAL,
  SUM(SAL) OVER() "TOTAL_SUM",
  SUM(SAL) OVER(PARTITION BY DEPTNO) "DEPT_SUM"
  FROM TEST_EMP;

 Q9) 사원의 이름, 부서번호, 급여, 업무별 급여평균, 해당업무의 최대급여를 조회한다.
 SELECT ENAME, DEPTNO, SAL,
 AVG(SAL) OVER (PARTITION BY JOB) "AVG_SUM",
 MAX(SAL) OVER (PARTITION BY JOB) "MAX_SUM"
 FROM TEST_EMP;

Q10) 사원이름, 부서번호, 봉급합계를 3줄씩 더한결과, 누적합계를 구해보자.

SELECT ENAME, DEPTNO, SAL,
SUM(SAL) OVER (ORDER BY SAL ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) "SUM1",
SUM(SAL) OVER (ORDER BY SAL ROWS UNBOUNDED PRECEDING) "SUM 12"
FROM TEST_EMP;

Q11) RATIO_TO_REPORT() 해당 구간에서 차지하는 비율을 리턴하는 함수
사원의 총 월급을 50000으로 증가했을 때, 기존 월급 비율로 적용했을 경우
각 사원은 얼마씩 받게되는지 확인해보자.

SELECT ENAME, SAL,
RATIO_TO_REPORT(SAL) OVER() AS "비율",
TRUNC(RATIO_TO_REPORT(SAL) OVER() * 50000) AS "받을 급여"
FROM TEST_EMP;
============================================================
LEAD/LAG/FAMILY
 : 특정로우가 속한 파티션내에서 상대적 상하 위치에 있는 특정 로우의 컬러값을 참조하거나
 상호 비교할 때 사용하는 함수.
 : 파티션 내에서 OFFSET 에 지정된 값 (1) 만큼 상대적으로 상황에 위치한 로우
  (오름차순 기준시 정렬 값 보다 작은 값을 갖는 로우, 내림차순 기준시 로우의 정렬값 보다
  큰값을 갖는 로우)을 참조하기 위해 사용된다.

 Q12) 사원이름, 부서번호, 봉급, 본인 이전의 봉급 값을 조회 LAG
 SELECT ENAME, DEPTNO, SAL,
 LAG(SAL,1,0) OVER (ORDER BY SAL) AS NET_SAL,
 LAG(SAL,1,SAL) OVER (ORDER BY SAL) AS SAL2,
 LAG(SAL,1,SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL) AS SAL3
 FROM TEST_EMP;


 Q13)
 LEAD () :  파티션 내에서 OFFSET 에 지정된 값 (1) 만큼 상대적으로 상황에 위치한 로우
  (오름차순 기준시 정렬 값 보다 큰 값을 갖는 로우, 내림차순 기준시 로우의 정렬값 보다
  작은값을 갖는 로우)을 참조하기 위해 사용된다.

 SELECT ENAME, DEPTNO, SAL,
 LEAD(SAL,1,0) OVER (ORDER BY SAL) AS NET_SAL,
 LEAD(SAL,1,SAL) OVER (ORDER BY SAL) AS SAL2,
 LEAD(SAL,1,SAL) OVER (PARTITION BY DEPTNO ORDER BY SAL) AS SAL3
 FROM TEST_EMP;

===============================================================
JOIN
 : 데이터 베이스에서 여러 테이블의 데이터가 필요한 경우 사용한다.
  - 어떤 테이블을 기준으로 다른 테이블에있는 ROW를 찾아오는 것
  - 서로 독립적인 데이터들 간의 조인을 이용해서 필요한 정보를 참조하게 된다.
  - 해당열에 존재하는 공통 값, 일반적으로 기본키 및 외래 키 열을 조인 조건으로 사용하여
     한 테이블의 행을 다른테이블의 행에 조인 할 수 있다.
  - N개의 테이블을 조인하려면 최소 N-1개의 조인 조건이 필요하다.
     만일 3개의 테이블을 조인하려면 최소 2개의 조인조건이 필요하다.

[형식] # 테이블 별칭 가능, 30자이내
    SELECT TABLE1.COLUMN, TABLE2.COLUMN, , , ,
    FROM TABLE1, TABLE2
    WHERE TABLE1.COLUMN = TABLE2.COLUMN;
    ======================================
 JOIN = INNER JOIN = EQUIJOIN : 두개의 테이블 간의 컬럼 값들이 정확하게 일치하는 경우 테이터를 리턴
 OUTER JOIN = 주종관계를 만들어서 주 테이블은 전체출력, 종테이블은 TRUE만 출력 한다.
 SELF JOIN = 같은 테이블에 있는 행들을 JOIN하는데 사용한다.
 NON-EQUIJOIN : 두개의 테이블 간에 컬럼값들이 정확하게 일치하지 않는경우 사용한다.


Q14) Cartesian : 첫번 째 테이블의 모든 행이 두번째 모든 행에 조인
    ex) A = ROW (N개)
        B = ROW (M개)
        => M * N
    <조건없이 JOIN>
     SELECT *
     FROM EMP, DEPT;



Q15)  INNER JOIN (FALSE, NULL)을 제외, 맞는값만 나옴

INNER JOIN 을 이용하여 사원테이블의 사원번호, 이름, 부서번호, 부서명 조회해보자.

<ANSI>
SELECT EMPNO, ENAME, DEPTNO, DNAME
FROM EMP JOIN DEPT USING(DEPTNO);

SELECT EMPNO, ENAME, DEPTNO, DNAME
FROM TEST_EMP JOIN DEPT USING(DEPTNO);

<ORACLE>
SELECT E.EMPNO, E.ENAME, E.DEPTNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO;


Q16) TEST_EMP 테이블에 부서 배치 받지 않은 사원을 추가해서 INNER JOIN
 INSERT INTO TEST_EMP(ENAME, DEPTNO) VALUES(777,NULL);

 <ANSI>
 SELECT EMPNO, ENAME, DEPTNO, DNAME
 FROM TEST_EMP JOIN DEPT USING(DEPTNO);

 <ORACLE>
 SELECT T.EMPNO, T.ENAME, T.DEPTNO, D.DNAME
 FROM TEST_EMP T, DEPT D
 WHERE T.DEPTNO = D.DEPTNO;

Q17) SALESMAN 의 사원번호, 이름, 급여, 부서명, 근무지를 리턴한다.

    SELECT TABLE1.COLUMN, TABLE2.COLUMN, , , ,
    FROM TABLE1, TABLE2
    WHERE TABLE1.COLUMN = TABLE2.COLUMN;

 <ANSI>
 SELECT EMPNO, ENAME, SAL, DNAME, LOC
 FROM EMP JOIN DEPT USING(DEPTNO);
 WHERE JOB = 'SALESMAN'

 <ORACLE>
 SELECT E.EMPNO, E.ENAME, E.SAL, D.DNAME, D.LOC
 FROM EMP E, DEPT D
 WHERE E.DEPTNO = D.DEPTNO AND E.JOB = 'SALESMAN';
===========================================================
Q18 ) OUTER JOIN = 주종관계를 만들어서 주 테이블은 전체출력, 종테이블은 TRUE만 출력

 EMP 테이블(종)과 DEPT 테이블(주)에서
 EMP 테이블에 있는 모든 자료를 사원번호, 이름, 직업,
 DEPT 테이블의 부서번호 부서명을 조회하자.

 <ANSI>
 SELECT EMPNO, ENAME, JOB, DEPTNO, DNAME
 FROM EMP OUTER JOIN DEPT USING(DEPTNO);

 SELECT EMPNO, ENAME, JOB, DEPTNO, DNAME
 FROM EMP LEFT OUTER JOIN DEPT USING(DEPTNO);
      주                   종


 <ORACLE>
 SELECT E.EMPNO, E.ENAME, E.JOB, D.DEPTNO, D.DNAME
 FROM DEPT D, EMP E
 WHERE D.DEPTNO = E.DEPTNO(+);

 CREATE TABLE X (
 S1 VARCHAR2(2),
 X2 VARCHAR2(2)
 )

  CREATE TABLE Y (
 S1 VARCHAR2(2),
 Y2 VARCHAR2(2)
 )

 X              Y
 S1  X2         S1    Y2
 YA   NULL      YA    NULL
 YB   1         YB    1
 C

 INSERT INTO X VALUES('YA', NULL);
 INSERT INTO X VALUES('YB' , 1);
 INSERT INTO X VALUES('C',NULL);

 INSERT INTO Y VALUES('YA', NULL);
 INSERT INTO Y VALUES('YB' , 1);

 SQL> SELECT *
  2  FROM X LEFT OUTER JOIN Y USING(S1); - 다 조회됨
 SQL> SELECT *
  2  FROM X RIGHT OUTER JOIN Y USING(S1); - 맞는 것만 조회됨

  =======================================================
 Q19) SELF JOIN
 : ANCI 조인은 없고, ORACLE 만 SELF JOIN이라는 말이 있음
 00 사원의 관리자는 00 이다.

 <ORACLE>
 SELECT WORKER.ENAME || '사원의 관리자는' || MANAGER.ENAME || '이다' AS "관리자 정보"
 FROM EMP WORKER, EMP MANAGER
 WHERE WORKER.MGR = MANAGER.EMPNO

  SELECT WORKER.ENAME || '사원의 관리자는' || MANAGER.ENAME || '이다' AS "관리자 정보"
 FROM EMP WORKER, EMP MANAGER
 WHERE WORKER.MGR = MANAGER.EMPNO(+); - 맞는것만나옴

 <ANSI>
 SELECT W.ENAME || '사원의 관리자는' ||  M.ENAME || '이다' AS "관리자 정보"
 FROM EMP W LEFT OUTER JOIN EMP M ON (W.MGR = M.EMPNO); (칼럼이름이 다르면 ON)

  Q20) 사원이름, 부서번호, 부서명을 조회하자.
  SELECT ENAME, DEPTNO, DNAME
  FROM EMP NATURAL JOIN DEPT USING(DEPTNO); #NATURAL 은 칼럼명을 명시하지  않음

  SELECT E.ENAME, DEPTNO, D.DNAME
  FROM EMP E NATURAL JOIN DEPT D;

Q21) CROSS JOIN
SELECT E.ENAME, D.DNAME
FROM EMP E CROSS JOIN DEPT D;

Q22) NON-EQUI JOIN
사원번호, 이름, 직업, 봉급, 봉급의 등급을 출력하자.

<ORACLE>
SELECT EMPNO, ENAME, JOB, SAL, GRADE
FROM SALGRADE, EMP
WHERE SAL BETWEEN LOSAL AND HISAL;

<ANSI>
SELECT ENAME, SAL, GRADE
FROM EMP JOIN SALGRADE ON (SAL BETWEEN LOSAL AND HISAL);

