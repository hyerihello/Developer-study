 
 기본 자료 형변환
 1. 명시적 형변환 : 타입을 명시하는 형변환
 	ex) int a = (int) 98.9; // a = 90
 	
 2. 묵시적 형변환 : 자동으로 형변환
 	double d = 90; // d=90.0
 
 				-32768 ~ 32767
 자바 byte(1) -> short(2) -> int(4) -> long(8) -> float(4) -> double(8)
                char(2) - 0~65535
                
                
                
  자바의 배열 : 같은 데이터 타입의 값을 나열형으로 하나의 이름으로 등록해서 사용하는 것
  
  1. 1차원 - length
  	형식) 직대입, 동적할당
  		데이터타입 변수명 [] = {,,,,,}
  		데이터타입 [] 변수명  = {,,,,,}
  		
  		데이터타입 [] 변수명  = new 데이터타입 [요소의크기];
  		데이터타입 [] 변수명  = new 데이터타입 []{,,,,};
  		
  2. 다차원
  
    형식) 직대입, 동적할당
  		데이터타입 변수명 [][] = {{},,,,,}
  		데이터타입 [][] 변수명  = {{},,,,,}
  		데이터타입 [] 변수명 []  = {{},,,,,}
  		
  		"데이터타입 [][]변수명  = new 데이터타입 [요소의 열의크기][];
  		데이터타입  변수명 [][]  = new 데이터타입 []{,,,,};

==============================================
[선언방법]
	접근제한자[abstract] class user_Name{
		멤버 (필드, 변수, 메소드[생성자])
	}
	
	생성자
	1. 클래스 이름과 동일하 되 반환형은 없다.
		ex) public class Test{}
				public Test(){} => 괄호안에 매개인자가 없으면 default constructor (기본생성자)
		
		
	2. overload 할 수 있다. (메서드이름은 동일하되, 갯수 또는 데이터타입을 다르게 줄 것)
		public Test(){}
		public Test(int, int){}
		public Test(int, double){}
		
	3. 접근제한자를 이용하여 접근을 제한 할 수 있다.
	4. 객체를 생성할 때 자동으로 한번만 호출되어 진다. 메소드처럼 객체 주소번지로 명시호출 할 수없다.
		Test t1 = new Test(); 기본생성자 - 대입
			 t1 = new Test(10,20); 매개인자 - 재대입
			 
		Test t1 = new Test(10,20); x불가
			 
	5. 생성자는 상속되지 않는다.
	6. this() 형식으로 생성자간의 내부호출이 가능하다. = python .self 대신에 
	 class Test{
	 	private int a, b;
		public Test(){ // a=0, b=0}
		public Test(int a, int b){
			this.a = a;
			this.b = b;
			}
		}
		Test t1 = new Test(); 기본생성자 - 대입
		Test t2 = new Test(10,20); 매개인자 - 재대입
		
	 class Test{
	 	private int a, b;
		public Test(){ 
		this(10,20); // 첫번째에 주기! 속도 더 빠름
		this.a = 10; // 차례대로 하기때문에 
		this.b = 20;
		 }
		public Test(int a, int b){
			this.a = a;
			this.b = b;
			}
		}
		Test t1 = new Test(); 
		// 멤버변수를 초기화 해놓고 0, 현재 오브젝트 주소로 멤버변수 값을 변경 -2개의 명령
		// 내부호출할때 : 멤버변수를 초기화 해놓고 0 현재 오브젝트 주소로 멤버변수 값을 변경 - 하나의명령
		
		
	7. 생성자는 멤버변수를 초기화 하는 목적을 가진다.
	
	8. 모든 클래스는 반드시 생성자를 가지며 생성자를 명시하지 않을 때는
		기본 생성자가 제공되어 호출되고 명시하게 되면 명시된 생성자가 호출된다. 
  		
  		
  		
  		