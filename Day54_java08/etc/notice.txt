1. 자바의 자료처리 클래스를 이해할 수 있다.
 (List/Set/Map)

  -자바 util package 는 crud 방법과 list, value ,key를 다루는것만 정리하면 된다.

2. jdbc연동을 구현할 수 있다 . // javadb (java와 oracle연결하기)
 - getting started 에서 type4번으로 구현해본다.
 - https://docs.oracle.com/javase/tutorial/jdbc/basics/gettingstarted.html
 
 - 'Install Apache Xalan' 날씨정보 xml 가져와서 구현하기! 눈도장찍어놓기
 
 
 1) java.sql / javax.sql 두개의 패키지를 참고하자.
 2) jdbc 연동하기
 	탐색기 ->  C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib -> jar파일 3개
 	-> C:\Program Files\Java\jdk1.8.0_291\jre\lib\ext에 복붙한다.
    -> jre system library 화깅ㄴ하면 ojdbc 확인하면 oracle 파일이 올라오는 것을 볼 수 있다.
    
    db랑 이클립스 연결하자,
    화면오른쪽 아이콘 javaee 클릭 -> data source explorer -> database connection 오마클 -> new -> oracle
    -> 오른쪽 풍차모양 -> 상단탭을 확인해보자 -> name/type -> oracle thin driver 11 클릭 -> jarlist -> 
    기존jar지우기 -> edit jar/zip -> C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 
    -> object6jar 클릭
    
    properties 에서 계정 셋팅 
	셋팅은 이미지파일로 맞추고 ok 후에 testconnection  성공 나오면 finish
	
	
  (1) 드라이버를 설치 : 원하는 데이터 베이스 서버에서 제공하는 드라이버를 다운로드 받아서(ojdbc6.jar) 
     자바 프로젝트가 참ㅂ조할 수 있또록 설치한다.
  (2) ojdbc6.jar 의 클래스를 참조해서 코드를 작성한다.
  (3) 프로그램의 작성 순서는 클라이언트 접속 상태처럼 순서를 따른다.
  
      -> 데이터 베이서 서버에 접속 
        Connection getConnection(String url, String user, String password)
      -> 명령을 입력 
        statement createStatement()
      	boolean execute(String sql)/int [] executeBatch()/
      	ResultSet executeQuery(String sql) : SELECT /
      	int executeUpdate(String sql) : INSERT, UPDATE, DELETE/     	
      ->  결과를 리턴 
         ResultSet : next() = row단위 또는 컬럼명 또는 인덱스로 컬럼을 추출할 수 있다.
      ->  종료 
         close()
    
    ** 웹,어플리케이션 로직 
							↓ jdbc템플릿은 여기에 연결됨(DAO 와 DB사이)  // dao : Data Access Object 
	m (model) - 3. 연산, DAO 후에 DB 또는 output
	v ( view) - 클라이언트만 접근(회원가입) -> 1.controler
	c (control) - 페이지제어, 유효성검증 -> 2. 데이터 보낼지 확인 후 model
	
	 -- VO(value object) : get,set 
	 -- Entity  : 연산의 값을 가지고 있음 	
 
  ** 프로젝트을 만들때
  1. mvc를 나눠야한다.
  2. Template을 짜야한다.
 
 
 
3. 스레드와 네트워크를 이용하여 챗의 구조를 이해할 수 있다.

=============================================================
 Score table
 name kor eng mat tot avg grade
 1    90  80  70  -   -   -  
 
 Class Score_VO{ // 순하게 값을 받는
 	
 	String name;
 	int kor, eng, mat;
 	생성자 + getter & setter
 	
 }
 
 Class Score_Calc{ // 비스니스 로직
  	ScoreVO -> 총점, 평균, 학점
  	계산된 결과를 ScoreEntity의 setter전달
 }
 
 Class ScoreEntity{
 	String name;
 	int kor, ent, mat;
 	int tot;
 	double avg;
 	String grade;
 	getter & setter
 	}
 	
 	public int getTot(){
 	tot = new Score_calc(), getTot();
 	return tot;
 	}
 
	public void setTot(int tot){
		this.tot = tot;
	}